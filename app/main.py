import os
import secrets
from dotenv import load_dotenv
from fastapi import FastAPI, HTTPException, Query, Request, Form, Depends
from fastapi.security import HTTPBasic, HTTPBasicCredentials
from fastapi.responses import Response, HTMLResponse
from sqlmodel import Session, select
from datetime import date
from collections import Counter
from twilio.twiml.messaging_response import MessagingResponse
from twilio.request_validator import RequestValidator

# Carrega as vari√°veis de ambiente do arquivo .env
load_dotenv()

# DEBUG: Confirma se as vari√°veis de ambiente do formul√°rio foram carregadas
print(f"--> Usu√°rio do .env: {os.getenv('FORM_USER')}")
print(f"--> Senha do .env: {os.getenv('FORM_PASSWORD')}")

app = FastAPI(title="API Trailer de Chopp")

# --- Configura√ß√£o de Seguran√ßa ---

# Obt√©m o Auth Token do Twilio das vari√°veis de ambiente
TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN")
validator = RequestValidator(TWILIO_AUTH_TOKEN)

# Credenciais para o formul√°rio web
security = HTTPBasic()
FORM_USER = os.getenv("FORM_USER")
FORM_PASSWORD = os.getenv("FORM_PASSWORD")

def get_current_username(credentials: HTTPBasicCredentials = Depends(security)) -> str:
    """
    Valida as credenciais do usu√°rio para o formul√°rio.
    """
    correct_user = secrets.compare_digest(credentials.username, FORM_USER)
    correct_pass = secrets.compare_digest(credentials.password, FORM_PASSWORD)
    if not (correct_user and correct_pass):
        raise HTTPException(
            status_code=401,
            detail="Usu√°rio ou senha incorretos",
            headers={"WWW-Authenticate": "Basic"},
        )
    return credentials.username

# --- Endpoints do Formul√°rio Web ---

@app.get("/", response_class=HTMLResponse)
async def get_registration_form(username: str = Depends(get_current_username)):
    """
    Serve a p√°gina HTML com o formul√°rio de registro (protegido por senha).
    """
    try:
        with open("app/templates/index.html", "r", encoding="utf-8") as f:
            return HTMLResponse(content=f.read())
    except FileNotFoundError:
        raise HTTPException(status_code=500, detail="Arquivo de formul√°rio n√£o encontrado.")

@app.post("/registrar_venda", response_class=HTMLResponse)
async def register_venda(
    data: date = Form(...),
    total: float = Form(...),
    cartao: float = Form(...),
    dinheiro: float = Form(...),
    pix: float = Form(...),
    custo_func: float = Form(...),
    custo_copos: float = Form(...),
    custo_boleto: float = Form(...),
    username: str = Depends(get_current_username) # Protege o endpoint
):
    """
    Recebe os dados do formul√°rio e salva no banco de dados (protegido por senha).
    """
    nova_venda = Venda(
        data=data,
        total=total,
        cartao=cartao,
        dinheiro=dinheiro,
        pix=pix,
        custo_func=custo_func,
        custo_copos=custo_copos,
        custo_boleto=custo_boleto,
        dia_semana=data.strftime('%A') # Salva o dia da semana
    )
    
    with Session(engine) as sess:
        sess.add(nova_venda)
        sess.commit()

    return HTMLResponse(content="<h1>Registro salvo com sucesso!</h1><p><a href='/'>Registrar outra venda</a></p>")

# --- L√≥gica de Relat√≥rios ---

def get_report_data(inicio: date, fim: date):
    """
    Busca e calcula os dados de um relat√≥rio para um per√≠odo espec√≠fico.
    """
    with Session(engine) as sess:
        vendas = sess.exec(select(Venda).where(Venda.data >= inicio, Venda.data < fim)).all()
    
    if not vendas:
        return None

    receita_bruta = sum(v.total for v in vendas)
    gasto_func = sum(v.custo_func for v in vendas)
    gasto_copos = sum(v.custo_copos for v in vendas)
    gasto_boleto = sum(v.custo_boleto for v in vendas)
    gasto_total = gasto_func + gasto_copos + gasto_boleto
    receita_liquida = receita_bruta - gasto_total
    media_vendas = receita_bruta / len(vendas)

    return {
        "receita_bruta": round(receita_bruta, 2),
        "receita_liquida": round(receita_liquida, 2),
        "media_vendas": round(media_vendas, 2),
        "gasto_funcionarios": round(gasto_func, 2),
        "gasto_copos": round(gasto_copos, 2),
        "gasto_boleto": round(gasto_boleto, 2),
        "dias_registrados": len(vendas),
    }

def get_dias_movimento(inicio: date, fim: date):
    """
    Busca e calcula os dias da semana mais lucrativos em um per√≠odo.
    """
    with Session(engine) as sess:
        vendas = sess.exec(select(Venda.dia_semana, Venda.total).where(Venda.data >= inicio, Venda.data < fim)).all()
    
    if not vendas:
        return None

    faturamento_por_dia = Counter()
    for dia_semana, total in vendas:
        if dia_semana:
            faturamento_por_dia[dia_semana] += total
    
    return faturamento_por_dia.most_common()

# --- Webhook do WhatsApp ---

@app.post("/whatsapp/webhook")
async def whatsapp_webhook(request: Request, body: str = Form(..., alias="Body")):
    """
    Webhook para receber mensagens WhatsApp via Twilio.
    """
    # Valida√ß√£o da requisi√ß√£o do Twilio
    # O Twilio envia o URL completo da requisi√ß√£o no cabe√ßalho 'X-Twilio-Signature'
    # e os par√¢metros do formul√°rio no corpo da requisi√ß√£o.
    # Precisamos reconstruir o URL e os par√¢metros para validar.
    url = str(request.url)
    form_params = await request.form()
    
    # DEBUG: Loga a URL e os par√¢metros recebidos
    print(f"DEBUG: Webhook URL recebida: {url}")
    print(f"DEBUG: Webhook Form Params recebidos: {form_params}")

    # Converte os ImmutableMultiDict para um dicion√°rio simples
    form_params_dict = {key: value for key, value in form_params.items()}

    # Obt√©m a assinatura do Twilio do cabe√ßalho da requisi√ß√£o
    twilio_signature = request.headers.get('X-Twilio-Signature', '')

    if not validator.validate(url, form_params_dict, twilio_signature):
        # Se a valida√ß√£o falhar, retorna um erro 403 Forbidden
        raise HTTPException(status_code=403, detail="Assinatura Twilio inv√°lida.")

    text = body.strip().lower().replace('relat√≥rio', 'relatorio')
    parts = text.split()
    command = " ".join(parts[:2]) if len(parts) > 1 else parts[0] if parts else ""
    
    resp = MessagingResponse()

    if command == "relatorio":
        try:
            mes = int(parts[1])
            ano = int(parts[2])
            
            # Busca relat√≥rio do m√™s atual
            inicio_atual = date(ano, mes, 1)
            fim_atual = date(ano + (mes == 12), (mes % 12) + 1, 1)
            report = get_report_data(inicio_atual, fim_atual)

            if not report:
                raise HTTPException(status_code=404, detail=f"Nenhum registro para {mes}/{ano}")

            # L√≥gica para tend√™ncia
            mes_anterior = mes - 1 if mes > 1 else 12
            ano_anterior = ano if mes > 1 else ano - 1
            inicio_anterior = date(ano_anterior, mes_anterior, 1)
            report_anterior = get_report_data(inicio_anterior, inicio_atual)

            tendencia_str = ""
            if report_anterior:
                rec_liq_atual = report['receita_liquida']
                rec_liq_anterior = report_anterior['receita_liquida']
                if rec_liq_anterior > 0:
                    variacao = (rec_liq_atual / rec_liq_anterior) - 1
                    tendencia_str = f"\nüìà Tend√™ncia: {variacao:.2%} em rela√ß√£o ao m√™s anterior."
                else:
                    tendencia_str = "\nüìà Tend√™ncia: N/A (m√™s anterior sem receita)."
            else:
                tendencia_str = "\nüìà Tend√™ncia: N/A (sem dados do m√™s anterior)."

            text_reply = (
                f"üßæ Relat√≥rio {mes}/{ano}\n"
                f"--------------------------\n"
                f"Receita bruta: R$ {report['receita_bruta']:.2f}\n"
                f"Receita l√≠quida: R$ {report['receita_liquida']:.2f}\n"
                f"M√©dia por dia: R$ {report['media_vendas']:.2f}\n"
                f"--------------------------\n"
                f"Gastos Totais: R$ {(report['gasto_funcionarios'] + report['gasto_copos'] + report['gasto_boleto']):.2f}\n"
                f"--------------------------\n"
                f"Dias registrados: {report['dias_registrados']}"
                f"{tendencia_str}"
            )
            resp.message(text_reply)

        except (ValueError, IndexError):
            resp.message("Formato inv√°lido. Use: relatorio <m√™s> <ano>")
        except HTTPException as e:
            resp.message(e.detail)

    elif command == "relatorio anual":
        try:
            ano = int(parts[2])
            inicio = date(ano, 1, 1)
            fim = date(ano + 1, 1, 1)
            report = get_report_data(inicio, fim)

            if not report:
                raise HTTPException(status_code=404, detail=f"Nenhum registro para o ano {ano}")

            text_reply = (
                f"üóìÔ∏è Relat√≥rio Anual {ano}\n"
                f"--------------------------\n"
                f"Receita bruta: R$ {report['receita_bruta']:.2f}\n"
                f"Receita l√≠quida: R$ {report['receita_liquida']:.2f}\n"
                f"M√©dia por dia: R$ {report['media_vendas']:.2f}\n"
                f"Dias registrados: {report['dias_registrados']}"
            )
            resp.message(text_reply)
        except (ValueError, IndexError):
            resp.message("Formato inv√°lido. Use: relatorio anual <ano>")
        except HTTPException as e:
            resp.message(e.detail)

    elif command == "comparar":
        try:
            mes1, ano1 = int(parts[1]), int(parts[2])
            mes2, ano2 = int(parts[3]), int(parts[4])

            inicio1 = date(ano1, mes1, 1)
            fim1 = date(ano1 + (mes1 == 12), (mes1 % 12) + 1, 1)
            report1 = get_report_data(inicio1, fim1)

            inicio2 = date(ano2, mes2, 1)
            fim2 = date(ano2 + (mes2 == 12), (mes2 % 12) + 1, 1)
            report2 = get_report_data(inicio2, fim2)

            if not report1:
                resp.message(f"N√£o h√° dados para o primeiro per√≠odo ({mes1}/{ano1}) para comparar.")
            elif not report2:
                resp.message(f"N√£o h√° dados para o segundo per√≠odo ({mes2}/{ano2}) para comparar.")
            else:
                rec_liq1, rec_liq2 = report1['receita_liquida'], report2['receita_liquida']
                variacao = f"{((rec_liq2 / rec_liq1) - 1):.2%}" if rec_liq1 > 0 else "N/A"
                
                text_reply = (
                    f"üìä Comparativo: {mes1}/{ano1} vs {mes2}/{ano2}\n"
                    f"--------------------------\n"
                    f"Receita L√≠quida:\n"
                    f"  - {mes1}/{ano1}: R$ {rec_liq1:.2f}\n"
                    f"  - {mes2}/{ano2}: R$ {rec_liq2:.2f}\n"
                    f"  - Varia√ß√£o: {variacao}"
                )
                resp.message(text_reply)
        except (ValueError, IndexError):
            resp.message("Formato inv√°lido. Use: comparar <m1> <a1> <m2> <a2>")

    elif command == "melhores dias":
        try:
            mes, ano = int(parts[2]), int(parts[3])
            inicio = date(ano, mes, 1)
            fim = date(ano + (mes == 12), (mes % 12) + 1, 1)
            ranking = get_dias_movimento(inicio, fim)

            if not ranking:
                resp.message(f"N√£o h√° dados de vendas para {mes}/{ano}.")
            else:
                reply_lines = [f"üèÜ Melhores Dias de {mes}/{ano} üèÜ"]
                for i, (dia, total) in enumerate(ranking):
                    reply_lines.append(f"{i+1}. {dia.capitalize()}: R$ {total:.2f}")
                resp.message("\n".join(reply_lines))
        except (ValueError, IndexError):
            resp.message("Formato inv√°lido. Use: melhores dias <m√™s> <ano>")

    elif command == "ajuda":
        text_reply = (
            "Comandos dispon√≠veis:\n"
            "1. `relatorio <m√™s> <ano>`\n"
            "2. `relatorio anual <ano>`\n"
            "3. `comparar <m1> <a1> <m2> <a2>`\n"
            "4. `melhores dias <m√™s> <ano>`\n"
            "5. `ajuda`"
        )
        resp.message(text_reply)

    else:
        resp.message("Comando n√£o reconhecido. Digite `ajuda` para ver as op√ß√µes.")

    return Response(content=str(resp), media_type="application/xml")